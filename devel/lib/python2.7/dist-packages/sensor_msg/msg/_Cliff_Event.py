# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_msg/Cliff_Event.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Cliff_Event(genpy.Message):
  _md5sum = "4aa84ea193dabb93b5378e5ff8539958"
  _type = "sensor_msg/Cliff_Event"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 LEFT
uint8 FRONT
uint8 RIGHT
uint8 BACK


"""
  __slots__ = ['LEFT','FRONT','RIGHT','BACK']
  _slot_types = ['uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LEFT,FRONT,RIGHT,BACK

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cliff_Event, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LEFT is None:
        self.LEFT = 0
      if self.FRONT is None:
        self.FRONT = 0
      if self.RIGHT is None:
        self.RIGHT = 0
      if self.BACK is None:
        self.BACK = 0
    else:
      self.LEFT = 0
      self.FRONT = 0
      self.RIGHT = 0
      self.BACK = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.LEFT, _x.FRONT, _x.RIGHT, _x.BACK))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.LEFT, _x.FRONT, _x.RIGHT, _x.BACK,) = _struct_4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.LEFT, _x.FRONT, _x.RIGHT, _x.BACK))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.LEFT, _x.FRONT, _x.RIGHT, _x.BACK,) = _struct_4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
