// Generated by gencpp from file rfid_handle/ClassifiedDataResponse.msg
// DO NOT EDIT!


#ifndef RFID_HANDLE_MESSAGE_CLASSIFIEDDATARESPONSE_H
#define RFID_HANDLE_MESSAGE_CLASSIFIEDDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfid_handle
{
template <class ContainerAllocator>
struct ClassifiedDataResponse_
{
  typedef ClassifiedDataResponse_<ContainerAllocator> Type;

  ClassifiedDataResponse_()
    : meanrssi()
    , stdrssi()
    , idcount()
    , ID()  {
    }
  ClassifiedDataResponse_(const ContainerAllocator& _alloc)
    : meanrssi(_alloc)
    , stdrssi(_alloc)
    , idcount(_alloc)
    , ID(_alloc)  {
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _meanrssi_type;
  _meanrssi_type meanrssi;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _stdrssi_type;
  _stdrssi_type stdrssi;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _idcount_type;
  _idcount_type idcount;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ID_type;
  _ID_type ID;




  typedef boost::shared_ptr< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClassifiedDataResponse_

typedef ::rfid_handle::ClassifiedDataResponse_<std::allocator<void> > ClassifiedDataResponse;

typedef boost::shared_ptr< ::rfid_handle::ClassifiedDataResponse > ClassifiedDataResponsePtr;
typedef boost::shared_ptr< ::rfid_handle::ClassifiedDataResponse const> ClassifiedDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rfid_handle

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rfid_handle': ['/home/turtlebot/xu_slam/src/rfid_handle/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37ec2ef5e847bd2e3350e3cf2771d175";
  }

  static const char* value(const ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37ec2ef5e847bd2eULL;
  static const uint64_t static_value2 = 0x3350e3cf2771d175ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfid_handle/ClassifiedDataResponse";
  }

  static const char* value(const ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] meanrssi\n\
float32[] stdrssi\n\
int16[] idcount\n\
string[] ID\n\
\n\
";
  }

  static const char* value(const ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.meanrssi);
      stream.next(m.stdrssi);
      stream.next(m.idcount);
      stream.next(m.ID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ClassifiedDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfid_handle::ClassifiedDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "meanrssi[]" << std::endl;
    for (size_t i = 0; i < v.meanrssi.size(); ++i)
    {
      s << indent << "  meanrssi[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.meanrssi[i]);
    }
    s << indent << "stdrssi[]" << std::endl;
    for (size_t i = 0; i < v.stdrssi.size(); ++i)
    {
      s << indent << "  stdrssi[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.stdrssi[i]);
    }
    s << indent << "idcount[]" << std::endl;
    for (size_t i = 0; i < v.idcount.size(); ++i)
    {
      s << indent << "  idcount[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.idcount[i]);
    }
    s << indent << "ID[]" << std::endl;
    for (size_t i = 0; i < v.ID.size(); ++i)
    {
      s << indent << "  ID[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ID[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFID_HANDLE_MESSAGE_CLASSIFIEDDATARESPONSE_H
