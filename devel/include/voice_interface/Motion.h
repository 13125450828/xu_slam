// Generated by gencpp from file voice_interface/Motion.msg
// DO NOT EDIT!


#ifndef VOICE_INTERFACE_MESSAGE_MOTION_H
#define VOICE_INTERFACE_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace voice_interface
{
template <class ContainerAllocator>
struct Motion_
{
  typedef Motion_<ContainerAllocator> Type;

  Motion_()
    : motion(false)
    , direction(0)
    , pattern(0)
    , stepcount(0)
    , metric(0)  {
    }
  Motion_(const ContainerAllocator& _alloc)
    : motion(false)
    , direction(0)
    , pattern(0)
    , stepcount(0)
    , metric(0)  {
    }



   typedef uint8_t _motion_type;
  _motion_type motion;

   typedef int64_t _direction_type;
  _direction_type direction;

   typedef int64_t _pattern_type;
  _pattern_type pattern;

   typedef int64_t _stepcount_type;
  _stepcount_type stepcount;

   typedef int64_t _metric_type;
  _metric_type metric;




  typedef boost::shared_ptr< ::voice_interface::Motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voice_interface::Motion_<ContainerAllocator> const> ConstPtr;

}; // struct Motion_

typedef ::voice_interface::Motion_<std::allocator<void> > Motion;

typedef boost::shared_ptr< ::voice_interface::Motion > MotionPtr;
typedef boost::shared_ptr< ::voice_interface::Motion const> MotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voice_interface::Motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voice_interface::Motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voice_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'voice_interface': ['/home/turtlebot2/xu_slam/src/voice_interface/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voice_interface::Motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voice_interface::Motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_interface::Motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_interface::Motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_interface::Motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_interface::Motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voice_interface::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ccb0619e5e125cf9d4604d26cea8e26";
  }

  static const char* value(const ::voice_interface::Motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ccb0619e5e125cfULL;
  static const uint64_t static_value2 = 0x9d4604d26cea8e26ULL;
};

template<class ContainerAllocator>
struct DataType< ::voice_interface::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voice_interface/Motion";
  }

  static const char* value(const ::voice_interface::Motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voice_interface::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool motion\n\
int64 direction\n\
int64 pattern\n\
int64 stepcount\n\
int64 metric\n\
";
  }

  static const char* value(const ::voice_interface::Motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voice_interface::Motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion);
      stream.next(m.direction);
      stream.next(m.pattern);
      stream.next(m.stepcount);
      stream.next(m.metric);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voice_interface::Motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voice_interface::Motion_<ContainerAllocator>& v)
  {
    s << indent << "motion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion);
    s << indent << "direction: ";
    Printer<int64_t>::stream(s, indent + "  ", v.direction);
    s << indent << "pattern: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pattern);
    s << indent << "stepcount: ";
    Printer<int64_t>::stream(s, indent + "  ", v.stepcount);
    s << indent << "metric: ";
    Printer<int64_t>::stream(s, indent + "  ", v.metric);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOICE_INTERFACE_MESSAGE_MOTION_H
