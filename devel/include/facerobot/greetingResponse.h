// Generated by gencpp from file facerobot/greetingResponse.msg
// DO NOT EDIT!


#ifndef FACEROBOT_MESSAGE_GREETINGRESPONSE_H
#define FACEROBOT_MESSAGE_GREETINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace facerobot
{
template <class ContainerAllocator>
struct greetingResponse_
{
  typedef greetingResponse_<ContainerAllocator> Type;

  greetingResponse_()
    : Heared(false)  {
    }
  greetingResponse_(const ContainerAllocator& _alloc)
    : Heared(false)  {
    }



   typedef uint8_t _Heared_type;
  _Heared_type Heared;




  typedef boost::shared_ptr< ::facerobot::greetingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::facerobot::greetingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct greetingResponse_

typedef ::facerobot::greetingResponse_<std::allocator<void> > greetingResponse;

typedef boost::shared_ptr< ::facerobot::greetingResponse > greetingResponsePtr;
typedef boost::shared_ptr< ::facerobot::greetingResponse const> greetingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::facerobot::greetingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::facerobot::greetingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace facerobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::facerobot::greetingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::facerobot::greetingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::facerobot::greetingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::facerobot::greetingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::facerobot::greetingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::facerobot::greetingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::facerobot::greetingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e88b3c6942653a44b00e700833d21183";
  }

  static const char* value(const ::facerobot::greetingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe88b3c6942653a44ULL;
  static const uint64_t static_value2 = 0xb00e700833d21183ULL;
};

template<class ContainerAllocator>
struct DataType< ::facerobot::greetingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "facerobot/greetingResponse";
  }

  static const char* value(const ::facerobot::greetingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::facerobot::greetingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Heared\n\
\n\
";
  }

  static const char* value(const ::facerobot::greetingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::facerobot::greetingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Heared);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct greetingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::facerobot::greetingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::facerobot::greetingResponse_<ContainerAllocator>& v)
  {
    s << indent << "Heared: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Heared);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACEROBOT_MESSAGE_GREETINGRESPONSE_H
