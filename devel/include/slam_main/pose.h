// Generated by gencpp from file slam_main/pose.msg
// DO NOT EDIT!


#ifndef SLAM_MAIN_MESSAGE_POSE_H
#define SLAM_MAIN_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <slam_main/position.h>
#include <slam_main/orientation.h>

namespace slam_main
{
template <class ContainerAllocator>
struct pose_
{
  typedef pose_<ContainerAllocator> Type;

  pose_()
    : position()
    , orientation()  {
    }
  pose_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)  {
    }



   typedef  ::slam_main::position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::slam_main::orientation_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;




  typedef boost::shared_ptr< ::slam_main::pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_main::pose_<ContainerAllocator> const> ConstPtr;

}; // struct pose_

typedef ::slam_main::pose_<std::allocator<void> > pose;

typedef boost::shared_ptr< ::slam_main::pose > posePtr;
typedef boost::shared_ptr< ::slam_main::pose const> poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_main::pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_main::pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slam_main

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'move_base_msgs': ['/opt/ros/indigo/share/move_base_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'slam_main': ['/home/turtlebot2/xu_slam/src/slam_main/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slam_main::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_main::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_main::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_main::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_main::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_main::pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_main::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ec5a94781ee76f5aa190025baf9a1a4";
  }

  static const char* value(const ::slam_main::pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ec5a94781ee76f5ULL;
  static const uint64_t static_value2 = 0xaa190025baf9a1a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_main::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_main/pose";
  }

  static const char* value(const ::slam_main::pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_main::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "position position\n\
orientation orientation\n\
\n\
================================================================================\n\
MSG: slam_main/position\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
================================================================================\n\
MSG: slam_main/orientation\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 w\n\
";
  }

  static const char* value(const ::slam_main::pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_main::pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_main::pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_main::pose_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::slam_main::position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::slam_main::orientation_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_MAIN_MESSAGE_POSE_H
