// Generated by gencpp from file laser/LaserLikihood.msg
// DO NOT EDIT!


#ifndef LASER_MESSAGE_LASERLIKIHOOD_H
#define LASER_MESSAGE_LASERLIKIHOOD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser
{
template <class ContainerAllocator>
struct LaserLikihood_
{
  typedef LaserLikihood_<ContainerAllocator> Type;

  LaserLikihood_()
    : rweight(0)
    , mrweight(0)
    , mlweight(0)
    , lweight(0)  {
    }
  LaserLikihood_(const ContainerAllocator& _alloc)
    : rweight(0)
    , mrweight(0)
    , mlweight(0)
    , lweight(0)  {
    }



   typedef int16_t _rweight_type;
  _rweight_type rweight;

   typedef int16_t _mrweight_type;
  _mrweight_type mrweight;

   typedef int16_t _mlweight_type;
  _mlweight_type mlweight;

   typedef int16_t _lweight_type;
  _lweight_type lweight;




  typedef boost::shared_ptr< ::laser::LaserLikihood_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser::LaserLikihood_<ContainerAllocator> const> ConstPtr;

}; // struct LaserLikihood_

typedef ::laser::LaserLikihood_<std::allocator<void> > LaserLikihood;

typedef boost::shared_ptr< ::laser::LaserLikihood > LaserLikihoodPtr;
typedef boost::shared_ptr< ::laser::LaserLikihood const> LaserLikihoodConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser::LaserLikihood_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser::LaserLikihood_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'laser': ['/home/turtlebot2/xu_slam/src/laser/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser::LaserLikihood_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser::LaserLikihood_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser::LaserLikihood_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser::LaserLikihood_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser::LaserLikihood_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser::LaserLikihood_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser::LaserLikihood_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4d03bcd89c263368f27f8d90957a312";
  }

  static const char* value(const ::laser::LaserLikihood_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4d03bcd89c26336ULL;
  static const uint64_t static_value2 = 0x8f27f8d90957a312ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser::LaserLikihood_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser/LaserLikihood";
  }

  static const char* value(const ::laser::LaserLikihood_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser::LaserLikihood_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 rweight\n\
int16 mrweight\n\
int16 mlweight\n\
int16 lweight\n\
";
  }

  static const char* value(const ::laser::LaserLikihood_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser::LaserLikihood_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rweight);
      stream.next(m.mrweight);
      stream.next(m.mlweight);
      stream.next(m.lweight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LaserLikihood_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser::LaserLikihood_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser::LaserLikihood_<ContainerAllocator>& v)
  {
    s << indent << "rweight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rweight);
    s << indent << "mrweight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mrweight);
    s << indent << "mlweight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mlweight);
    s << indent << "lweight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lweight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_MESSAGE_LASERLIKIHOOD_H
