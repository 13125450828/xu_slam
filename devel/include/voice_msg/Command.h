// Generated by gencpp from file voice_msg/Command.msg
// DO NOT EDIT!


#ifndef VOICE_MSG_MESSAGE_COMMAND_H
#define VOICE_MSG_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voice_msg/Motion.h>
#include <voice_msg/Navigation.h>
#include <voice_msg/Transmit.h>
#include <voice_msg/Transmit.h>

namespace voice_msg
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : my_motion()
    , my_navigation()
    , my_send()
    , my_get()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : my_motion(_alloc)
    , my_navigation(_alloc)
    , my_send(_alloc)
    , my_get(_alloc)  {
    }



   typedef  ::voice_msg::Motion_<ContainerAllocator>  _my_motion_type;
  _my_motion_type my_motion;

   typedef  ::voice_msg::Navigation_<ContainerAllocator>  _my_navigation_type;
  _my_navigation_type my_navigation;

   typedef  ::voice_msg::Transmit_<ContainerAllocator>  _my_send_type;
  _my_send_type my_send;

   typedef  ::voice_msg::Transmit_<ContainerAllocator>  _my_get_type;
  _my_get_type my_get;




  typedef boost::shared_ptr< ::voice_msg::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voice_msg::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::voice_msg::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::voice_msg::Command > CommandPtr;
typedef boost::shared_ptr< ::voice_msg::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voice_msg::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voice_msg::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voice_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'voice_msg': ['/home/turtlebot2/xu_slam/src/voice_msg/msg', '/home/turtlebot2/xu_slam/src/voice_msg/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voice_msg::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voice_msg::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_msg::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_msg::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_msg::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_msg::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voice_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cbdeafeecf997d6c967c6edbf968861";
  }

  static const char* value(const ::voice_msg::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cbdeafeecf997d6ULL;
  static const uint64_t static_value2 = 0xc967c6edbf968861ULL;
};

template<class ContainerAllocator>
struct DataType< ::voice_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voice_msg/Command";
  }

  static const char* value(const ::voice_msg::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voice_msg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Motion my_motion\n\
Navigation my_navigation\n\
Transmit my_send\n\
Transmit my_get\n\
\n\
================================================================================\n\
MSG: voice_msg/Motion\n\
bool motion\n\
int64 direction\n\
int64 pattern\n\
int64 stepcount\n\
int64 metric\n\
\n\
================================================================================\n\
MSG: voice_msg/Navigation\n\
bool navigation\n\
int64 go\n\
int64 direct\n\
int64 columnNum\n\
int64 rowNum\n\
\n\
================================================================================\n\
MSG: voice_msg/Transmit\n\
bool transmit\n\
int64 object\n\
int64 didian\n\
";
  }

  static const char* value(const ::voice_msg::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voice_msg::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.my_motion);
      stream.next(m.my_navigation);
      stream.next(m.my_send);
      stream.next(m.my_get);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voice_msg::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voice_msg::Command_<ContainerAllocator>& v)
  {
    s << indent << "my_motion: ";
    s << std::endl;
    Printer< ::voice_msg::Motion_<ContainerAllocator> >::stream(s, indent + "  ", v.my_motion);
    s << indent << "my_navigation: ";
    s << std::endl;
    Printer< ::voice_msg::Navigation_<ContainerAllocator> >::stream(s, indent + "  ", v.my_navigation);
    s << indent << "my_send: ";
    s << std::endl;
    Printer< ::voice_msg::Transmit_<ContainerAllocator> >::stream(s, indent + "  ", v.my_send);
    s << indent << "my_get: ";
    s << std::endl;
    Printer< ::voice_msg::Transmit_<ContainerAllocator> >::stream(s, indent + "  ", v.my_get);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOICE_MSG_MESSAGE_COMMAND_H
