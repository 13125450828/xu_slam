# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rplidar_python/rplidar_parameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rplidar_parameters(genpy.Message):
  _md5sum = "05c2b16c1f8f5bfc65f2cc4796b6a278"
  _type = "rplidar_python/rplidar_parameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 angle_max
float32 angle_min
float32 angle_increment
float32 time_increment
float32 scan_time
float32 range_min
float32 range_max
uint64 frame

"""
  __slots__ = ['angle_max','angle_min','angle_increment','time_increment','scan_time','range_min','range_max','frame']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       angle_max,angle_min,angle_increment,time_increment,scan_time,range_min,range_max,frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rplidar_parameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angle_max is None:
        self.angle_max = 0.
      if self.angle_min is None:
        self.angle_min = 0.
      if self.angle_increment is None:
        self.angle_increment = 0.
      if self.time_increment is None:
        self.time_increment = 0.
      if self.scan_time is None:
        self.scan_time = 0.
      if self.range_min is None:
        self.range_min = 0.
      if self.range_max is None:
        self.range_max = 0.
      if self.frame is None:
        self.frame = 0
    else:
      self.angle_max = 0.
      self.angle_min = 0.
      self.angle_increment = 0.
      self.time_increment = 0.
      self.scan_time = 0.
      self.range_min = 0.
      self.range_max = 0.
      self.frame = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7fQ.pack(_x.angle_max, _x.angle_min, _x.angle_increment, _x.time_increment, _x.scan_time, _x.range_min, _x.range_max, _x.frame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.angle_max, _x.angle_min, _x.angle_increment, _x.time_increment, _x.scan_time, _x.range_min, _x.range_max, _x.frame,) = _struct_7fQ.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7fQ.pack(_x.angle_max, _x.angle_min, _x.angle_increment, _x.time_increment, _x.scan_time, _x.range_min, _x.range_max, _x.frame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.angle_max, _x.angle_min, _x.angle_increment, _x.time_increment, _x.scan_time, _x.range_min, _x.range_max, _x.frame,) = _struct_7fQ.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7fQ = struct.Struct("<7fQ")
