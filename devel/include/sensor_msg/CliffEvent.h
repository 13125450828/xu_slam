// Generated by gencpp from file sensor_msg/CliffEvent.msg
// DO NOT EDIT!


#ifndef SENSOR_MSG_MESSAGE_CLIFFEVENT_H
#define SENSOR_MSG_MESSAGE_CLIFFEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_msg
{
template <class ContainerAllocator>
struct CliffEvent_
{
  typedef CliffEvent_<ContainerAllocator> Type;

  CliffEvent_()
    : sensor(0)
    , state(0)
    , bottom(0)  {
    }
  CliffEvent_(const ContainerAllocator& _alloc)
    : sensor(0)
    , state(0)
    , bottom(0)  {
    }



   typedef uint8_t _sensor_type;
  _sensor_type sensor;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint16_t _bottom_type;
  _bottom_type bottom;


    enum { LEFT = 0u };
     enum { CENTER = 1u };
     enum { RIGHT = 2u };
     enum { FLOOR = 0u };
     enum { CLIFF = 1u };
 

  typedef boost::shared_ptr< ::sensor_msg::CliffEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msg::CliffEvent_<ContainerAllocator> const> ConstPtr;

}; // struct CliffEvent_

typedef ::sensor_msg::CliffEvent_<std::allocator<void> > CliffEvent;

typedef boost::shared_ptr< ::sensor_msg::CliffEvent > CliffEventPtr;
typedef boost::shared_ptr< ::sensor_msg::CliffEvent const> CliffEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_msg::CliffEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_msg::CliffEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensor_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msg': ['/home/turtlebot/xu_slam/src/sensor_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msg::CliffEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msg::CliffEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msg::CliffEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msg::CliffEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msg::CliffEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msg::CliffEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_msg::CliffEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5b106efbb1427a94f517c5e05f06295";
  }

  static const char* value(const ::sensor_msg::CliffEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5b106efbb1427a9ULL;
  static const uint64_t static_value2 = 0x4f517c5e05f06295ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msg::CliffEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msg/CliffEvent";
  }

  static const char* value(const ::sensor_msg::CliffEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_msg::CliffEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Provides a cliff sensor event.\n\
# This message is generated whenever a particular cliff sensor signals that the\n\
# robot approaches or moves away from a cliff.\n\
# Note that, despite cliff field on SensorState messages, state field is not a\n\
# bitmask, but the new state of a single sensor.\n\
\n\
# cliff sensor\n\
uint8 LEFT   = 0\n\
uint8 CENTER = 1\n\
uint8 RIGHT  = 2\n\
\n\
# cliff sensor state\n\
uint8 FLOOR = 0\n\
uint8 CLIFF = 1\n\
\n\
uint8 sensor\n\
uint8 state\n\
\n\
# distance to floor when cliff was detected\n\
uint16 bottom\n\
";
  }

  static const char* value(const ::sensor_msg::CliffEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_msg::CliffEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor);
      stream.next(m.state);
      stream.next(m.bottom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CliffEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msg::CliffEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_msg::CliffEvent_<ContainerAllocator>& v)
  {
    s << indent << "sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "bottom: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bottom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSG_MESSAGE_CLIFFEVENT_H
