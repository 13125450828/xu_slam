// Generated by gencpp from file voice_msg/Navigation.msg
// DO NOT EDIT!


#ifndef VOICE_MSG_MESSAGE_NAVIGATION_H
#define VOICE_MSG_MESSAGE_NAVIGATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace voice_msg
{
template <class ContainerAllocator>
struct Navigation_
{
  typedef Navigation_<ContainerAllocator> Type;

  Navigation_()
    : navigation(false)
    , go(0)
    , direct(0)
    , columnNum(0)
    , rowNum(0)  {
    }
  Navigation_(const ContainerAllocator& _alloc)
    : navigation(false)
    , go(0)
    , direct(0)
    , columnNum(0)
    , rowNum(0)  {
    }



   typedef uint8_t _navigation_type;
  _navigation_type navigation;

   typedef int64_t _go_type;
  _go_type go;

   typedef int64_t _direct_type;
  _direct_type direct;

   typedef int64_t _columnNum_type;
  _columnNum_type columnNum;

   typedef int64_t _rowNum_type;
  _rowNum_type rowNum;




  typedef boost::shared_ptr< ::voice_msg::Navigation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voice_msg::Navigation_<ContainerAllocator> const> ConstPtr;

}; // struct Navigation_

typedef ::voice_msg::Navigation_<std::allocator<void> > Navigation;

typedef boost::shared_ptr< ::voice_msg::Navigation > NavigationPtr;
typedef boost::shared_ptr< ::voice_msg::Navigation const> NavigationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voice_msg::Navigation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voice_msg::Navigation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voice_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'voice_msg': ['/home/turtlebot2/xu_slam/src/voice_msg/msg', '/home/turtlebot2/xu_slam/src/voice_msg/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voice_msg::Navigation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voice_msg::Navigation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_msg::Navigation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_msg::Navigation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_msg::Navigation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_msg::Navigation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voice_msg::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6e0630035008c8fd093b1b103c4e65";
  }

  static const char* value(const ::voice_msg::Navigation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6e0630035008c8ULL;
  static const uint64_t static_value2 = 0xfd093b1b103c4e65ULL;
};

template<class ContainerAllocator>
struct DataType< ::voice_msg::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voice_msg/Navigation";
  }

  static const char* value(const ::voice_msg::Navigation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voice_msg::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool navigation\n\
int64 go\n\
int64 direct\n\
int64 columnNum\n\
int64 rowNum\n\
";
  }

  static const char* value(const ::voice_msg::Navigation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voice_msg::Navigation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.navigation);
      stream.next(m.go);
      stream.next(m.direct);
      stream.next(m.columnNum);
      stream.next(m.rowNum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Navigation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voice_msg::Navigation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voice_msg::Navigation_<ContainerAllocator>& v)
  {
    s << indent << "navigation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navigation);
    s << indent << "go: ";
    Printer<int64_t>::stream(s, indent + "  ", v.go);
    s << indent << "direct: ";
    Printer<int64_t>::stream(s, indent + "  ", v.direct);
    s << indent << "columnNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.columnNum);
    s << indent << "rowNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rowNum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOICE_MSG_MESSAGE_NAVIGATION_H
