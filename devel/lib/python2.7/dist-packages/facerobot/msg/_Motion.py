"""autogenerated by genpy from facerobot/Motion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Motion(genpy.Message):
  _md5sum = "1ccb0619e5e125cf9d4604d26cea8e26"
  _type = "facerobot/Motion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool motion
int64 direction
int64 pattern
int64 stepcount
int64 metric

"""
  __slots__ = ['motion','direction','pattern','stepcount','metric']
  _slot_types = ['bool','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motion,direction,pattern,stepcount,metric

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motion is None:
        self.motion = False
      if self.direction is None:
        self.direction = 0
      if self.pattern is None:
        self.pattern = 0
      if self.stepcount is None:
        self.stepcount = 0
      if self.metric is None:
        self.metric = 0
    else:
      self.motion = False
      self.direction = 0
      self.pattern = 0
      self.stepcount = 0
      self.metric = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B4q.pack(_x.motion, _x.direction, _x.pattern, _x.stepcount, _x.metric))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.motion, _x.direction, _x.pattern, _x.stepcount, _x.metric,) = _struct_B4q.unpack(str[start:end])
      self.motion = bool(self.motion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B4q.pack(_x.motion, _x.direction, _x.pattern, _x.stepcount, _x.metric))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.motion, _x.direction, _x.pattern, _x.stepcount, _x.metric,) = _struct_B4q.unpack(str[start:end])
      self.motion = bool(self.motion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B4q = struct.Struct("<B4q")
