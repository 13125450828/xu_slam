// Generated by gencpp from file web_map/web_map.msg
// DO NOT EDIT!


#ifndef WEB_MAP_MESSAGE_WEB_MAP_H
#define WEB_MAP_MESSAGE_WEB_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace web_map
{
template <class ContainerAllocator>
struct web_map_
{
  typedef web_map_<ContainerAllocator> Type;

  web_map_()
    : clear_area()
    , block_area()  {
    }
  web_map_(const ContainerAllocator& _alloc)
    : clear_area(_alloc)
    , block_area(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _clear_area_type;
  _clear_area_type clear_area;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _block_area_type;
  _block_area_type block_area;




  typedef boost::shared_ptr< ::web_map::web_map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::web_map::web_map_<ContainerAllocator> const> ConstPtr;

}; // struct web_map_

typedef ::web_map::web_map_<std::allocator<void> > web_map;

typedef boost::shared_ptr< ::web_map::web_map > web_mapPtr;
typedef boost::shared_ptr< ::web_map::web_map const> web_mapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::web_map::web_map_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::web_map::web_map_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace web_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'web_map': ['/home/turtlebot2/xu_slam/src/web_map/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::web_map::web_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::web_map::web_map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::web_map::web_map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::web_map::web_map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::web_map::web_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::web_map::web_map_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::web_map::web_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38e94daf928ada60065df6e7dff9e4cb";
  }

  static const char* value(const ::web_map::web_map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38e94daf928ada60ULL;
  static const uint64_t static_value2 = 0x065df6e7dff9e4cbULL;
};

template<class ContainerAllocator>
struct DataType< ::web_map::web_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "web_map/web_map";
  }

  static const char* value(const ::web_map::web_map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::web_map::web_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string clear_area\n\
string block_area\n\
";
  }

  static const char* value(const ::web_map::web_map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::web_map::web_map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clear_area);
      stream.next(m.block_area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct web_map_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::web_map::web_map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::web_map::web_map_<ContainerAllocator>& v)
  {
    s << indent << "clear_area: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.clear_area);
    s << indent << "block_area: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.block_area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEB_MAP_MESSAGE_WEB_MAP_H
